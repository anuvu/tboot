#! /bin/sh
set -e

# grub-mkconfig helper script.
# Copyright (C) 2006,2007,2008,2009,2010  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

prefix=/usr
exec_prefix=${prefix}
bindir=${exec_prefix}/bin
libdir=${exec_prefix}/lib
sysconfdir=/etc
if test -e /usr/share/grub/grub-mkconfig_lib; then
  . /usr/share/grub/grub-mkconfig_lib
elif test -e ${libdir}/grub/grub-mkconfig_lib; then
  . ${libdir}/grub/grub-mkconfig_lib
elif test -e /usr/share/grub2/grub-mkconfig_lib; then
  . /usr/share/grub2/grub-mkconfig_lib
fi

if test -e ${sysconfdir}/default/grub-tboot; then
  .  ${sysconfdir}/default/grub-tboot
fi

# Set the following variables in /etc/default/grub-tboot to customize command lines
# (empty values are treated as if the variables were unset).
[ -z "${GRUB_CMDLINE_TBOOT}" ] && unset GRUB_CMDLINE_TBOOT
[ -z "${GRUB_CMDLINE_XEN_TBOOT}" ] && unset GRUB_CMDLINE_XEN_TBOOT
[ -z "${GRUB_CMDLINE_LINUX_XEN_TBOOT}" ] && unset GRUB_CMDLINE_LINUX_XEN_TBOOT
[ -z "${GRUB_TBOOT_POLICY_DATA}" ] && unset GRUB_TBOOT_POLICY_DATA
# Command line for tboot itself
: ${GRUB_CMDLINE_TBOOT='logging=serial,memory,vga'}
# Xen parameters to append for tboot
: ${GRUB_CMDLINE_XEN_TBOOT=''}
# Linux kernel parameters to append for tboot + Xen
: ${GRUB_CMDLINE_LINUX_XEN_TBOOT=''}
# Base name of LCP policy data file for list policy
: ${GRUB_TBOOT_POLICY_DATA=''}

export TEXTDOMAIN=grub
export TEXTDOMAINDIR=${prefix}/share/locale

CLASS="--class gnu-linux --class gnu --class os --class xen"

if [ "x${GRUB_DISTRIBUTOR}" = "x" ] ; then
  OS=GNU/Linux
else
  OS="${GRUB_DISTRIBUTOR} GNU/Linux"
  CLASS="--class $(echo ${GRUB_DISTRIBUTOR} | tr 'A-Z' 'a-z' | cut -d' ' -f1) ${CLASS}"
fi

# loop-AES arranges things so that /dev/loop/X can be our root device, but
# the initrds that Linux uses don't like that.
case ${GRUB_DEVICE} in
  /dev/loop/*|/dev/loop[0-9])
    GRUB_DEVICE=`losetup ${GRUB_DEVICE} | sed -e "s/^[^(]*(\([^)]\+\)).*/\1/"`
  ;;
esac

if [ "x${GRUB_DEVICE_UUID}" = "x" ] || [ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ] \
    || ! test -e "/dev/disk/by-uuid/${GRUB_DEVICE_UUID}" \
    || uses_abstraction "${GRUB_DEVICE}" lvm; then
  LINUX_ROOT_DEVICE=${GRUB_DEVICE}
else
  LINUX_ROOT_DEVICE=UUID=${GRUB_DEVICE_UUID}
fi

# Allow overriding GRUB_CMDLINE_LINUX and GRUB_CMDLINE_LINUX_DEFAULT.
if [ "${GRUB_CMDLINE_LINUX_XEN_REPLACE}" ]; then
  GRUB_CMDLINE_LINUX="${GRUB_CMDLINE_LINUX_XEN_REPLACE}"
fi
if [ "${GRUB_CMDLINE_LINUX_XEN_REPLACE_DEFAULT}" ]; then
  GRUB_CMDLINE_LINUX_DEFAULT="${GRUB_CMDLINE_LINUX_XEN_REPLACE_DEFAULT}"
fi

if [ "x`${grub_probe} --device ${GRUB_DEVICE} --target=fs 2>/dev/null || true`" = xbtrfs ] \
    || [ "x`stat -f --printf=%T /`" = xbtrfs ]; then
  rootsubvol="`make_system_path_relative_to_its_root /`"
  rootsubvol="${rootsubvol#/}"
  if [ "x${rootsubvol}" != x ]; then
    GRUB_CMDLINE_LINUX="rootflags=subvol=${rootsubvol} ${GRUB_CMDLINE_LINUX}"
  fi
fi

# Merge all sequences of spaces into a single space, like GRUB2 does during boot.
# Simplistic, doesn't check for quoting, but should be good enough for the kernel command line.
merge_spaces() {
  echo "$*" | sed -e 's/ \{1,\}/ /g' -e 's/^ //' -e 's/ $//'
}

linux_entry ()
{
  os="$1"
  version="$2"
  xen_version="$3"
  recovery="$4"
  args="$5"
  xen_args="$6"
  tboot_version="$7"
  tboot_args="$8"
  iommu_args="$9"
  if ${recovery} ; then
    title="$(gettext_quoted "%s, with Xen %s, Tboot %s and Linux %s (recovery mode)")"
  else
    title="$(gettext_quoted "%s, with Xen %s, Tboot %s and Linux %s")"
  fi
  printf "menuentry '${title}' ${CLASS} {\n" "${os}" "${xen_version}" "${tboot_version}" "${version}"
  if ! ${recovery} ; then
      save_default_entry | sed -e "s/^/\t/"
  fi

  if [ -z "${prepare_boot_cache}" ]; then
    prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | sed -e "s/^/\t/")"
  fi
  printf '%s\n' "${prepare_boot_cache}"
  xmessage="$(gettext_printf "Loading Xen %s ..." ${xen_version})"
  tmessage="$(gettext_printf "Loading Tboot %s ..." ${tboot_version})"
  lmessage="$(gettext_printf "Loading Linux %s ..." ${version})"
  tbargs=`merge_spaces ${tboot_args}`
  xnargs=`merge_spaces ${xen_args} ${iommu_args}`
  lxargs=`merge_spaces root=${linux_root_device_thisversion} ro ${args}`
  cat << EOF
	echo	'$tmessage'
	multiboot	${rel_tboot_dirname}/${tboot_basename} ${tbargs}
	echo	'$xmessage'
	module	${rel_xen_dirname}/${xen_basename} ${xnargs}
	echo	'$lmessage'
	module	${rel_dirname}/${basename} ${lxargs}
EOF
  if test -n "${initrd}" ; then
    message="$(gettext_printf "Loading initial ramdisk ...")"
    cat << EOF
	echo	'$message'
	module	${rel_dirname}/${initrd}
EOF
  fi
  if test -n "${sinit_list}" ; then
    for i in ${sinit_list}; do
      message="$(gettext_printf "Loading sinit $i ...")"
      cat << EOF
        echo    '$message'
        module  ${rel_dirname}/${i}
EOF
    done
  fi
  if test -n "${poldata_file}" ; then
    message="$(gettext_printf "Loading tboot policy data file ${poldata_file} ...")"
    cat << EOF
	echo	'$message'
	module  ${rel_dirname}/${poldata_file}
EOF
  fi
  cat << EOF
}
EOF
}

linux_list=`for i in /boot/vmlinu[xz]-* /vmlinu[xz]-* /boot/kernel-*; do
    if grub_file_is_not_garbage "$i"; then
    	basename=$(basename $i)
	version=$(echo $basename | sed -e "s,^[^0-9]*-,,g")
	dirname=$(dirname $i)
	config=
	for j in "${dirname}/config-${version}" "${dirname}/config-${alt_version}" "/etc/kernels/kernel-config-${version}" ; do
	    if test -e "${j}" ; then
		config="${j}"
		break
	    fi
	done
        if (grep -qx "CONFIG_XEN_DOM0=y" "${config}" 2> /dev/null || grep -qx "CONFIG_XEN_PRIVILEGED_GUEST=y" "${config}" 2> /dev/null); then echo -n "$i " ; fi
    fi
    done`
if [ "x${linux_list}" = "x" ] ; then
    exit 0
fi
xen_list=`for i in /boot/xen*; do
        if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
      done`
tboot_list=`for i in /boot/tboot*.gz; do
        if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
      done`
sinit_list=`for i in /boot/*sinit* /boot/*SINIT*; do
        basename=$(basename $i)
        if grub_file_is_not_garbage "$i" ; then echo -n "$basename " ; fi
      done`
if [ -n "${GRUB_TBOOT_POLICY_DATA}" ]; then
  if grub_file_is_not_garbage "/boot/${GRUB_TBOOT_POLICY_DATA}"; then
    poldata_file=${GRUB_TBOOT_POLICY_DATA}
  else
    echo "ERROR in $0: GRUB_TBOOT_POLICY_DATA=${GRUB_TBOOT_POLICY_DATA} not found in /boot, check ${sysconfdir}/default/grub-tboot" >&2
  fi
fi
prepare_boot_cache=

while [ "x${xen_list}" != "x" ] ; do
    current_xen=`version_find_latest $xen_list`
    xen_basename=`basename ${current_xen}`
    xen_dirname=`dirname ${current_xen}`
    rel_xen_dirname=`make_system_path_relative_to_its_root $xen_dirname`
    xen_version=`echo $xen_basename | sed -e "s,.gz$,,g;s,^xen-,,g"`
    tlist="${tboot_list}"
    while [ "x${tlist}" != "x" ] && [ "x$linux_list" != "x" ] ; do
        current_tboot=`version_find_latest $tlist`
        tboot_basename=`basename ${current_tboot}`
        tboot_dirname=`dirname ${current_tboot}`
        rel_tboot_dirname=`make_system_path_relative_to_its_root $tboot_dirname`
        tboot_version="1.9.9"
        list="${linux_list}"
        echo "submenu \"Xen ${xen_version}\" \"Tboot ${tboot_version}\"{"
        while [ "x$list" != "x" ] ; do
            linux=`version_find_latest $list`
            echo "Found linux image: $linux" >&2
            basename=`basename $linux`
            dirname=`dirname $linux`
            rel_dirname=`make_system_path_relative_to_its_root $dirname`
            version=`echo $basename | sed -e "s,^[^0-9]*-,,g"`
            alt_version=`echo $version | sed -e "s,\.old$,,g"`
            linux_root_device_thisversion="${LINUX_ROOT_DEVICE}"

            initrd=
            for i in "initrd.img-${version}" "initrd-${version}.img" \
                "initrd-${version}" "initrd.img-${alt_version}" \
                "initrd-${alt_version}.img" "initrd-${alt_version}" \
                "initramfs-genkernel-${version}" \
                "initramfs-genkernel-${alt_version}" ; do
                if test -e "${dirname}/${i}" ; then
                    initrd="$i"
                    break
                fi
            done
            if test -n "${initrd}" ; then
                echo "Found initrd image: ${dirname}/${initrd}" >&2
            else
        # "UUID=" magic is parsed by initrds.  Since there's no initrd, it can't work here.
                linux_root_device_thisversion=${GRUB_DEVICE}
            fi

            linux_entry "${OS}" "${version}" "${xen_version}" false \
			"${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT} ${GRUB_CMDLINE_LINUX_XEN_TBOOT}" \
			"${GRUB_CMDLINE_XEN} ${GRUB_CMDLINE_XEN_DEFAULT} ${GRUB_CMDLINE_XEN_TBOOT}" \
			"${tboot_version}" "${GRUB_CMDLINE_TBOOT}" "iommu=force"
            if [ "x${GRUB_DISABLE_RECOVERY}" != "xtrue" ]; then
                linux_entry "${OS}" "${version}" "${xen_version}" true \
			    "single ${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_XEN_TBOOT}" \
			    "${GRUB_CMDLINE_XEN} ${GRUB_CMDLINE_XEN_TBOOT}" \
			    "${tboot_version}" "${GRUB_CMDLINE_TBOOT}" "iommu=force"
            fi

            list=`echo $list | tr ' ' '\n' | grep -vx $linux | tr '\n' ' '`
        done
        echo "}"
        tlist=`echo $tlist | tr ' ' '\n' | grep -vx $current_tboot | tr '\n' ' '`
    done
    xen_list=`echo $xen_list | tr ' ' '\n' | grep -vx $current_xen | tr '\n' ' '`
done
